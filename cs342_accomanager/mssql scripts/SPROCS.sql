set ansi_warnings off
use master
----------------------------------------------------------WAS USED FOR MANUAL INSERTS
IF OBJECT_ID (N'[dbo].spInsertProductReserve', 'P')
IS NOT NULL
DROP PROCEDURE spInsertProductReserve
GO

CREATE PROCEDURE spInsertProductReserve
    @ReserveDate DATE,
    @Avail INT,
    @Pid INT
AS
BEGIN
    SET NOCOUNT ON;

    -- Insert data into the PRODUCT_RESERVE table
    INSERT INTO dbo.[PRODUCT_RESERVE] (DATE,AVAILABILITY,PID,STOCK)
    VALUES (@ReserveDate, @Avail, @Pid, @Avail);


END;
GO

/*
--concatenate terms into a string for a particular product
IF OBJECT_ID (N'[dbo].spConcatTerms','P')
IS NOT NULL
DROP PROCEDURE spConcatTerms
GO
CREATE PROCEDURE spConcatTerms
	@Pid INT
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO PROD_TERMS_CONCAT (PID, TERMS)
	SELECT
    PT.PID,
    STRING_AGG(PT.TERM_ID, ',') WITHIN GROUP (ORDER BY PT.TERM_ID) AS TERMS_CONCAT
	FROM PRODUCT_HAS_TERM PT
	WHERE PT.PID=@Pid
	GROUP BY PT.PID
	
	--SELECT * FROM PROD_TERMS_CONCAT;

END;
GO
*/

/*
--concatenate terms into string for all records
IF OBJECT_ID (N'[dbo].spConcatTermsAll', 'P')
IS NOT NULL
DROP PROCEDURE spConcatTermsAll
GO
CREATE PROCEDURE spConcatTermsAll
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO PROD_TERMS_CONCAT (PID, TERMS)
	SELECT
    PT.PID,
    STRING_AGG(PT.TERM_ID, ',') WITHIN GROUP (ORDER BY PT.TERM_ID) AS TERMS_CONCAT
	FROM PRODUCT_HAS_TERM PT
	GROUP BY PT.PID

END;
GO
*/

-----------------------------------FIND PACKAGES----------------------------------------------------!!!
IF OBJECT_ID (N'[dbo].spFindPackages','P')
IS NOT NULL
DROP PROCEDURE spFindPackages
GO
CREATE PROCEDURE spFindPackages
    @StartDate DATE,
	@EndDate DATE,
    @RoomType NVARCHAR(100),
	@City NVARCHAR (100),
	@Persons INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT RT.ACC_ID,P.ROOM_CODE,COUNT(DISTINCT PR.DATE) AS DATERONI,COUNT(DISTINCT PR.PID) AS PRODS, SUM(P.PPD) AS FINAL_PRICE, MAX(PTC.TERMS_CONCAT) AS TERMS --PATENTA TOU AIWNA
	FROM PRODUCT_RESERVE PR
	JOIN PRODUCT AS P ON P.PID = PR.PID
	JOIN vwConcatTermsAll PTC ON PR.PID = PTC.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	WHERE
	PR.DATE>=@StartDate
	AND PR.DATE<=@EndDate
	AND PR.AVAILABILITY >0
	AND (@RoomType IS NULL OR RT.TITLE = @RoomType)
	AND (@City IS NULL OR CITY.CITY_NAME = @City)
	AND (@Persons IS NULL OR RT.MAX_PERSONS>=@Persons)
	AND (P.MAX_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) <= P.MAX_STAY)
	AND (P.MIN_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) >= P.MIN_STAY)
	GROUP BY RT.ACC_ID,P.ROOM_CODE,PTC.TERMS_CONCAT HAVING (COUNT(DISTINCT PR.DATE)=DATEDIFF(day,@StartDate,@EndDate)+1)
END;
GO


--------------------------------FIND MIN FROM PACKAGE----------------------------------------------!!!
IF OBJECT_ID (N'[dbo].spFindMinFromPackages','P')
IS NOT NULL
DROP PROCEDURE spFindMinFromPackages
GO
CREATE PROCEDURE spFindMinFromPackages
    @StartDate DATE,
	@EndDate DATE,
    @RoomType NVARCHAR(100),
	@City NVARCHAR (100),
	@Persons INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT T.ACC_ID,A.NAME,ATYPE.DESCRIPTION,MIN(FINAL_PRICE) AS MIN_PRICE,CITY.CITY_NAME AS CITY, CITY.COUNTRY_NAME AS COUNTRY,@StartDate AS START_DATE,@EndDate AS END_DATE
	FROM(
	SELECT RT.ACC_ID,P.ROOM_CODE,COUNT(DISTINCT PR.DATE) AS DATERONI,COUNT(DISTINCT PR.PID) AS PRODS, SUM(P.PPD) AS FINAL_PRICE, MAX(PTC.TERMS_CONCAT) AS TERMS 
	FROM PRODUCT_RESERVE PR 
	JOIN PRODUCT AS P ON P.PID = PR.PID 
	JOIN vwConcatTermsAll PTC ON PR.PID = PTC.PID 
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	WHERE
	PR.DATE>=@StartDate
	AND PR.DATE<=@EndDate
	AND PR.AVAILABILITY >0
	AND (@RoomType IS NULL OR RT.TITLE = @RoomType)
	AND (@City IS NULL OR CITY.CITY_NAME = @City)
	AND (@Persons IS NULL OR RT.MAX_PERSONS>=@Persons)
	AND (P.MAX_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) <= P.MAX_STAY)
	AND (P.MIN_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) >= P.MIN_STAY)
	GROUP BY RT.ACC_ID,P.ROOM_CODE,PTC.TERMS_CONCAT HAVING (COUNT(DISTINCT PR.DATE)=DATEDIFF(day,@StartDate,@EndDate)+1)) AS T
	JOIN ACCOMMODATION A ON A.ACC_ID = T.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	GROUP BY T.ACC_ID,A.NAME,CITY.CITY_NAME,CITY.COUNTRY_NAME,ATYPE.DESCRIPTION
END;
GO

--EXEC spFindMinFromPackages '2023-11-16','2023-11-20',NULL,NULL,NULL
--GO
--SELECT P.PID,P.PPD,MIN(PR.DATE),MAX(PR.DATE) FROM PRODUCT P JOIN PRODUCT_RESERVE PR ON PR.PID =  P.PID GROUP BY P.PID,P.PPD

IF OBJECT_ID (N'[dbo].spFindPackagesInAccommodation','P')
IS NOT NULL
DROP PROCEDURE spFindPackagesInAccommodation
GO
CREATE PROCEDURE spFindPackagesInAccommodation
    @StartDate DATE,
	@EndDate DATE,
    @Accom_id NVARCHAR(100),
	@Persons INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT RT.ACC_ID,A.NAME AS ACCOM_NAME,P.ROOM_CODE AS RT_CODE,RT.TITLE AS ROOM_TYPE,RT.NOTES,COUNT(DISTINCT PR.DATE) AS DATERONI,COUNT(DISTINCT PR.PID) AS PRODS, SUM(P.PPD) AS FINAL_PRICE, CITY.CITY_NAME AS CITY,
	CITY.COUNTRY_NAME AS COUNTRY,MAX(RHA.AMENITIES_CONCAT) AS AMENITIES,MIN(PR.AVAILABILITY) AS AVAILABILITY,MAX(PTC.TERMS_CONCAT) AS TERMS
	FROM PRODUCT_RESERVE PR 
	JOIN PRODUCT AS P ON P.PID = PR.PID 
	JOIN vwConcatTermsAll PTC ON PR.PID = PTC.PID 
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	JOIN vwConcatAmenitiesAll RHA ON RHA.ROOM_CODE = P.ROOM_CODE
	WHERE
	PR.DATE>=@StartDate
	AND PR.DATE<=@EndDate
	AND PR.AVAILABILITY >0
	AND A.ACC_ID=@Accom_id
	AND (@Persons IS NULL OR RT.MAX_PERSONS>=@Persons)
	AND (P.MAX_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) <= P.MAX_STAY)
	AND (P.MIN_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) >= P.MIN_STAY)
	GROUP BY RT.ACC_ID,P.ROOM_CODE,RT.TITLE,RT.NOTES,A.NAME,CITY.CITY_NAME,CITY.COUNTRY_NAME,RHA.AMENITIES_CONCAT,PTC.TERMS_CONCAT HAVING (COUNT(DISTINCT PR.DATE)=DATEDIFF(day,@StartDate,@EndDate)+1)
END;
GO

--EXEC spFindPackagesInAccommodation '2023-11-16','2023-11-20',1


-------------------------VIEW DETAILS OF A PACKAGE--------------------------------(DEAD PROCEDURE)
IF OBJECT_ID (N'[dbo].spPackageDetails','P')
IS NOT NULL
DROP PROCEDURE spPackageDetails
GO
CREATE PROCEDURE spPackageDetails
    @StartDate DATE,
	@EndDate DATE,
    @RoomType INT,
	@Accom_id INT,
	@Terms NVARCHAR(500),
	@Persons INT
AS
BEGIN
	SET NOCOUNT ON;
	SELECT RT.ACC_ID,A.NAME AS ACCOM_NAME,P.ROOM_CODE AS RT_CODE,RT.TITLE AS ROOM_TYPE,RT.NOTES,
	COUNT(DISTINCT PR.DATE) AS DATERONI,COUNT(DISTINCT PR.PID) AS PRODS, SUM(P.PPD) AS FINAL_PRICE, CITY.CITY_NAME AS CITY,
	CITY.COUNTRY_NAME AS COUNTRY,MAX(RHA.AMENITIES_CONCAT) AS AMENITIES,MAX(PTC.TERMS_CONCAT) AS TERMS --PATENTA TOU AIWNA
	FROM PRODUCT_RESERVE PR 
	JOIN PRODUCT AS P ON P.PID = PR.PID 
	JOIN vwConcatTermsAll PTC ON PR.PID = PTC.PID 
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	JOIN vwConcatAmenitiesAll RHA ON RHA.ROOM_CODE = P.ROOM_CODE
	WHERE
	PR.DATE>=@StartDate
	AND PR.DATE<=@EndDate
	AND PR.AVAILABILITY >0
	AND A.ACC_ID=@Accom_id
	AND RT.CODE = @RoomType
	AND PTC.TERMS_CONCAT=@Terms
	AND RT.MAX_PERSONS>=@Persons
	AND (P.MAX_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) <= P.MAX_STAY)
	AND (P.MIN_STAY IS NULL OR DATEDIFF(day,@StartDate,@EndDate) >= P.MIN_STAY)
	GROUP BY RT.ACC_ID,P.ROOM_CODE,RT.TITLE,A.NAME,CITY.CITY_NAME,CITY.COUNTRY_NAME,RT.NOTES,RHA.AMENITIES_CONCAT,PTC.TERMS_CONCAT HAVING (COUNT(DISTINCT PR.DATE)=DATEDIFF(day,@StartDate,@EndDate)+1)
END;
GO

--EXEC spPackageDetails '2023-11-16','2023-11-20',4,1,'16,19,21',NULL
--GO


--AFTER CHOOSING A PACKAGE, FIND THE PRODUCTS IN IT---------------------------------------------------------------------
IF OBJECT_ID(N'[dbo].spFindProductsInPackage','P')
IS NOT NULL
DROP PROCEDURE spFindProductsInPackage
GO
CREATE PROCEDURE spFindProductsInPackage
	@StartDate DATE,
	@EndDate DATE,
	@RoomType NVARCHAR(200),
	@Acc_id INT,
	@Terms NVARCHAR(200)
AS
BEGIN
	SET NOCOUNT ON;
	SELECT DISTINCT P.PID
	FROM PRODUCT_RESERVE PR JOIN PRODUCT P ON P.PID = PR.PID JOIN vwConcatTermsAll PTC ON PTC.PID = PR.PID JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	WHERE PR.DATE>=@StartDate AND PR.DATE<=@EndDate AND PR.AVAILABILITY>=0 AND RT.ACC_ID=@Acc_id AND RT.TITLE=@RoomType AND PTC.TERMS_CONCAT=@Terms
END;
GO

IF OBJECT_ID(N'[dbo].spFindPackageTerms','P')
IS NOT NULL
DROP PROCEDURE spFindPackageTerms
GO
CREATE PROCEDURE spFindPackageTerms
	@StartDate DATE,
	@EndDate DATE,
	@RoomType NVARCHAR(200),
	@Acc_id INT,
	@Terms NVARCHAR(200)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Temp TABLE (PID INT)
	DECLARE @oneProduct INT
	INSERT INTO @Temp EXEC spFindProductsInPackage @StartDate,@EndDate,@RoomType,@Acc_id,@Terms
	SET @oneProduct = (SELECT MIN(PID) FROM @Temp)

	SELECT T.DESCRIPTION
	FROM PRODUCT_HAS_TERM PHT 
	JOIN TERMS T ON T.CODE = PHT.TERM_ID
	WHERE PHT.PID = @oneProduct
END;
GO

IF OBJECT_ID(N'[dbo].spFindPackageAmenities','P')
IS NOT NULL
DROP PROCEDURE spFindPackageAmenities
GO
CREATE PROCEDURE spFindPackageAmenities
	@StartDate DATE,
	@EndDate DATE,
	@RoomType NVARCHAR(200),
	@Acc_id INT,
	@Terms NVARCHAR(200)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @Temp TABLE (PID INT)
	DECLARE @oneProduct INT
	INSERT INTO @Temp EXEC spFindProductsInPackage @StartDate,@EndDate,@RoomType,@Acc_id,@Terms
	SET @oneProduct = (SELECT MIN(PID) FROM @Temp)

	SELECT AMENITY.DESCRIPTION
	FROM ROOM_HAS_AMENITY RHA
	JOIN PRODUCT P ON P.ROOM_CODE = RHA.ROOM_CODE
	JOIN AMENITY ON AMENITY.CODE = RHA.CODE
	WHERE P.PID = @oneProduct


END;
GO


--When attempting to insert a new product, finds whether the same product already exists in the date range provided
IF OBJECT_ID(N'[dbo].spFindSameProducts','P')
IS NOT NULL
DROP PROCEDURE spFindSameProducts
GO
CREATE PROCEDURE spFindSameProducts
	@room_type INT,
	@date_start DATE,
	@date_end DATE,
	@terms nvarchar(200),
	@ppd INT,
	@exists BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS(
	SELECT *
	FROM PRODUCT_RESERVE PR JOIN vwConcatTermsAll PTC ON PR.PID = PTC.PID JOIN PRODUCT P ON P.PID = PR.PID JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	WHERE PR.[DATE]>=@date_start AND PR.[DATE]<=@date_end AND P.ROOM_CODE = @room_type AND PTC.TERMS_CONCAT=@terms
	)
	BEGIN
	SET @exists = 1
	END
	ELSE
	BEGIN 
	SET @exists = 0
	END
END;
GO

-----------------------insert new products------------------------------!!!(manager)
IF OBJECT_ID(N'[dbo].spInsertProducts','P')
IS NOT NULL 
DROP PROCEDURE spInsertProducts
GO
CREATE PROCEDURE spInsertProducts
	@ManagerID INT,
    @room_type INT,
    @terms NVARCHAR(200), -- Comma-separated string of term IDs
    @pc INT,
    @date_start DATE,
    @date_end DATE,
    @ppd DECIMAL(10, 2),
    @stock INT,
	@cancellation_policy INT,
	@prepayment_policy INT,
	@override_policy INT,
	@override_start DATE,
	@override_end DATE,
	@min_stay INT,
	@max_stay INT
--@pid INT OUTPUT -- Added an output parameter to store PID
AS
BEGIN
    SET NOCOUNT ON;

	IF(@override_start IS NOT NULL AND @override_start<@date_start OR @override_end IS NOT NULL AND @override_end > @date_end)
	BEGIN
		RAISERROR('OVERRIDE DATES OUTSIDE PRODUCT DATE RANGE',16,1);
	END

	ELSE
	BEGIN
		
		DECLARE @exists_same_product BIT
		EXEC spFindSameProducts @room_type,@date_start,@date_end,@terms,@ppd,@exists_same_product OUTPUT

		IF @exists_same_product = 0
		BEGIN
			INSERT INTO dbo.[PRODUCT] (ROOM_CODE, CATEGORY_CODE, PPD, CANCEL_POLICY,OVERRIDE_PC,OVERRIDE_START,OVERRIDE_END,MIN_STAY,MAX_STAY,PREPAYMENT_POLICY)
			VALUES (@room_type, @pc,@ppd,@cancellation_policy,@override_policy,@override_start,@override_end,@min_stay,@max_stay,@prepayment_policy);

			-- Get the captured PID
			DECLARE @pid INT
			SELECT @pid = SCOPE_IDENTITY()
				
			DECLARE @current_date DATE = @date_start;

		    WHILE @current_date <= @date_end
		    BEGIN
		        INSERT INTO dbo.[PRODUCT_RESERVE] (DATE, AVAILABILITY, PID,STOCK)
		        VALUES (@current_date, @stock, @pid,@stock);

		        SET @current_date = DATEADD(DAY, 1, @current_date);
		    END
		
			DECLARE @TermsTable TABLE (TID INT);
			INSERT INTO @TermsTable (TID)
			SELECT *
			FROM STRING_SPLIT(@terms, ',');

		    -- Insert into PRODUCT_HAS_TERM table using STRING_SPLIT
		    INSERT INTO dbo.[PRODUCT_HAS_TERM] (PID, TERM_ID)
		    SELECT @pid,* FROM @TermsTable

			INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
			VALUES(@ManagerID,'Inserted Product',GETDATE())
			--EXEC spConcatTerms @pid
		END
		ELSE
		BEGIN
		RAISERROR('The same product already exists for one or more of the dates specified!',16,1);
		END
	END
END;
GO




--Creates booking record & booking_has_product record. Updates availability automatically--!!!
IF OBJECT_ID(N'[dbo].spCreateBooking','P') 
IS NOT NULL
DROP PROCEDURE spCreateBooking
GO
CREATE PROCEDURE spCreateBooking
	@StartDate DATE,
	@EndDate DATE,
	@RoomType NVARCHAR(200),
	@Acc_id INT,
	@Terms NVARCHAR(200),
	@User_id INT,
	@City NVARCHAR(200),
	@Persons INT,
	@Amount INT
AS
BEGIN
SET NOCOUNT ON;
	IF(@EndDate>@StartDate)
	BEGIN
		--Get package and final price--
		DECLARE @Package TABLE (ACCOM_ID INT,ROOM_CODE NVARCHAR(200),DATES INT,PRODS INT,FINAL_PRICE DECIMAL(8,2),TERMS NVARCHAR(200))
		INSERT @Package EXEC spFindPackages @StartDate,@EndDate,@RoomType,@City,@Persons
		DECLARE @FinalPrice DECIMAL(8,2)
		SET @FinalPrice = (SELECT P.FINAL_PRICE FROM @Package P WHERE P.ACCOM_ID = @Acc_id AND P.TERMS = @Terms)
		SELECT * FROM @Package
		IF EXISTS (SELECT * FROM @Package)
		BEGIN

		--Get products in package--
			DECLARE @Products TABLE (PID INT)
			INSERT @Products EXEC spFindProductsInPackage @StartDate,@EndDate,@RoomType,@Acc_id,@Terms

			--Check availability--
			IF NOT EXISTS(SELECT * FROM PRODUCT_RESERVE PR WHERE PR.PID IN(SELECT * FROM @Products) AND PR.AVAILABILITY<@Amount AND PR.DATE>=@StartDate AND PR.DATE<@EndDate)
				BEGIN
					--Insert into booking table--
					INSERT INTO dbo.[BOOKING] (START_DATE,END_DATE,FINAL_PRICE,USER_ID,CANCELLED,AMOUNT)
					VALUES(@StartDate,@EndDate,@FinalPrice,@User_id,0,@Amount);

					--Get inserted booking_id
					DECLARE @booking_id INT
					SET @booking_id = SCOPE_IDENTITY()
					INSERT INTO dbo.[BOOKING_HAS_PRODUCT] (BOOKING_ID,PID)
					SELECT @booking_id,* FROM @Products
				END
				ELSE
				BEGIN
					RAISERROR('NOT ENOUGH AVAILABLE ROOMS FOR SPECIFIED DATES OR WRONG INPUT1',16,1);
				END
		END
			ELSE
			BEGIN
			RAISERROR('NOT ENOUGH AVAILABLE ROOMS FOR SPECIFIED DATES OR WRONG INPUT2',16,1);
		END
	END
	ELSE
	BEGIN
		RAISERROR('INVALID DATE SELECTION',16,1);
	END
END;
GO


--SELECT * FROM PRODUCT_RESERVE WHERE PID = 5 OR PID = 6
--SELECT * FROM BOOKING_HAS_PRODUCT

--INSERT NEW ROOM TYPE------------------------!!!
IF OBJECT_ID(N'[dbo].spInsertRoomType','P') 
IS NOT NULL
DROP PROCEDURE spInsertRoomType
GO
CREATE PROCEDURE spInsertRoomType
	@ManagerID INT,
	@Title NVARCHAR(500),
	@Notes NVARCHAR(500),
	@Acc_id INT,
	@Max_persons INT,
	@Subrooms INT,
	@Amenities NVARCHAR(1000)
AS
BEGIN
SET NOCOUNT ON;
	IF NOT EXISTS(SELECT * FROM ROOM_TYPE RT WHERE RT.TITLE = @Title AND RT.NOTES = @Notes AND RT.ACC_ID = @Acc_id )
	BEGIN
		INSERT INTO dbo.[ROOM_TYPE](TITLE,NOTES,ACC_ID,MAX_PERSONS,SUBROOMS)
		VALUES
		(@Title,@Notes,@Acc_id,@Max_persons,@Subrooms);

			DECLARE @id INT
			SET @id = SCOPE_IDENTITY();

			DECLARE @AmenitiesTable TABLE (ID INT);
			INSERT INTO @AmenitiesTable (ID)
			SELECT *
			FROM STRING_SPLIT(@Amenities, ',');

		    INSERT INTO dbo.[ROOM_HAS_AMENITY] (ROOM_CODE,CODE)
		    SELECT @id,* FROM @AmenitiesTable

		--INSERT INTO AUDIT MANAGER--
		INSERT INTO dbo.[AUDIT_MANAGER](MANAGER_ID,[DESCRIPTION],[DATE])
		VALUES	(@ManagerID,'Added Room Type',GETDATE());
	END
	ELSE
	BEGIN
		RAISERROR('ALREADY EXISTS!',16,1);
	END
END;
GO

---Insert Amenity Room---------------------------
IF OBJECT_ID (N'[dbo].spInsertAmenityRoom','P')
IS NOT NULL
DROP PROCEDURE spInsertAmenityRoom
GO
CREATE PROCEDURE spInsertAmenityRoom
	@Room_Code INT,
	@Amenity_Code INT
AS
BEGIN
	SET NOCOUNT ON;
	INSERT INTO dbo.ROOM_HAS_AMENITY(ROOM_CODE,CODE) VALUES (@Room_Code,@Amenity_Code)
END;
GO

------------GET ACCOMMODATION TYPES-------------!!!
IF OBJECT_ID(N'[dbo].spGetAccommodationTypes','P')
IS NOT NULL
DROP PROCEDURE spGetAccommodationTypes
GO
CREATE PROCEDURE spGetAccommodationTypes
AS
BEGIN
SET NOCOUNT ON;
	SELECT * FROM ACCOMMODATION_TYPE
END;
GO

------------GET CONTACT PERSON OF A MANAGER--!!!
IF OBJECT_ID(N'[dbo].spGetContactPerson','P')
IS NOT NULL
DROP PROCEDURE spGetContactPerson
GO
CREATE PROCEDURE spGetContactPerson
	@User_id INT
AS
BEGIN
SET NOCOUNT ON;
	SELECT C.*
	FROM MANAGES M JOIN ACCOMMODATION A ON M.ACCOM_ID=A.ACC_ID JOIN CONTACT_PERSON C ON C.CONTACT_ID = A.CONTACT_ID
	WHERE M.USER_ID = @User_id
END;
GO

-------------------CANCEL---BOOKING---------------------
IF OBJECT_ID(N'[dbo].spCancelBooking','P')
IS NOT NULL
DROP PROCEDURE spCancelBooking
GO
CREATE PROCEDURE spCancelBooking
	@Booking_id INT
AS
BEGIN
SET NOCOUNT ON;
	DECLARE @a_product TABLE(PID INT, CANCEL_POLICY INT, OVERRIDE_PC INT, OVERRIDE_START DATE,OVERRIDE_END DATE)
	DECLARE @booking_start_date DATE
	DECLARE @max_days_prior INT
	DECLARE @penalty NUMERIC(5,2)
	DECLARE @cancelled INT

	INSERT INTO @a_product
	SELECT MIN(BHP.PID) AS PID,MIN(P.CANCEL_POLICY),MIN(P.OVERRIDE_PC),MIN(P.OVERRIDE_START),MIN(P.OVERRIDE_END)
	FROM BOOKING B JOIN BOOKING_HAS_PRODUCT BHP ON BHP.BOOKING_ID = B.BOOKING_ID JOIN PRODUCT P ON P.PID = BHP.PID


	IF (
    (SELECT MIN(OVERRIDE_PC) FROM @a_product) IS NOT NULL
    AND GETDATE() >= (SELECT MIN(OVERRIDE_START) FROM @a_product)
    AND GETDATE() <= (SELECT MIN(OVERRIDE_END) FROM @a_product)
	)
	BEGIN
		SELECT @max_days_prior= CP.MAX_DAYS_PRIOR,@penalty=CP.PENALTY
		FROM @a_product AS T
		JOIN CANCELLATION_POLICY CP ON CP.ID = T.OVERRIDE_PC
	END

	ELSE
	BEGIN
		SELECT @max_days_prior= CP.MAX_DAYS_PRIOR,@penalty=CP.PENALTY
		FROM @a_product AS T
		JOIN CANCELLATION_POLICY CP ON CP.ID = T.CANCEL_POLICY
	END
		
	SELECT @booking_start_date=B.START_DATE,@cancelled=B.CANCELLED FROM BOOKING B WHERE B.BOOKING_ID=@Booking_id

	IF(GETDATE()>@booking_start_date OR @cancelled=1 OR DATEDIFF(DAY,GETDATE(),@booking_start_date)<@max_days_prior)
		BEGIN
		RAISERROR('Cant cancel booking.', 16, 1);
		END
	ELSE
		BEGIN
			UPDATE BOOKING
			SET CANCELLED = 1
			WHERE BOOKING.BOOKING_ID = @Booking_id
		END
	
END;
GO
--EXEC spCancelBooking 37
--SELECT * FROM PRODUCT P JOIN CANCELLATION_POLICY CP ON CP.ID = P.CANCEL_POLICY
--SELECT * FROM BOOKING
--SELECT * FROM PRODUCT_RESERVE PR WHERE PR.DATE>='2024-2-12' AND PR.DATE<='2024-3-1'

-------INSERT CANCELLATION POLICY------------
IF OBJECT_ID (N'[dbo].spInsertCancellationPolicy','P')
IS NOT NULL
DROP PROCEDURE spInsertCancellationPolicy
GO

CREATE PROCEDURE spInsertCancellationPolicy
    @ManagerID INT,
    @MAX_DAYS_PRIOR INT,
    @PENALTY DECIMAL(5,2) 

AS
BEGIN
SET NOCOUNT ON;
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT 1
        FROM dbo.CANCELLATION_POLICY
        WHERE MAX_DAYS_PRIOR = @MAX_DAYS_PRIOR
        AND PENALTY = @PENALTY
    )
    BEGIN
         RAISERROR('This cancellation policy already exists.', 16, 1);

    END
    ELSE
    BEGIN
        INSERT INTO dbo.CANCELLATION_POLICY(MAX_DAYS_PRIOR,PENALTY)
        VALUES(@MAX_DAYS_PRIOR,@PENALTY)
    END
    --INSERT AUDIT MANAGER--
    INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
    VALUES(@ManagerID,'Added Cancellation Policy',GETDATE());
END;
GO

-------INSERT PREPAYMENT POLICY------------
IF OBJECT_ID (N'[dbo].spInsertPrepaymentPolicy','P')
IS NOT NULL
DROP PROCEDURE spInsertPrepaymentPolicy
GO

CREATE PROCEDURE spInsertPrepaymentPolicy
    @ManagerID INT,
    @DAYS_PRIOR INT,
    @AMOUNT DECIMAL(5,2) 

AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (
        SELECT 1
        FROM dbo.PREPAYMENT_POLICY
        WHERE DAYS_PRIOR = @DAYS_PRIOR
        AND AMOUNT = @AMOUNT
    )
    BEGIN
         RAISERROR('This prepayment policy already exists.', 16, 1);

    END
    ELSE
    BEGIN
        INSERT INTO dbo.PREPAYMENT_POLICY(DAYS_PRIOR,AMOUNT)
        VALUES(@DAYS_PRIOR,@AMOUNT)
    END

    --INSERT AUDIT MANAGER--
    INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
    VALUES(@ManagerID,'Added Prepayment Policy',GETDATE());
END;
GO

--=========================================================================================================================================================================================================================================--
------------------------------------------------------------------------------------------------------------REPORTS------------------------------------------------------------------------------------------------------------------------
--===========================================================================================================================================================================================================================================--

-----------------------------INCOME REPORT---------------------!!!

IF OBJECT_ID(N'[dbo].spIncomeReport','P')
IS NOT NULL
DROP PROCEDURE spIncomeReport
GO
CREATE PROCEDURE spIncomeReport
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE,
	@SORT NVARCHAR(4)
AS
BEGIN
SET NOCOUNT ON;



	SELECT
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY,
    SUM(T.FINAL_PRICE) AS Income
FROM
    (
	SELECT B.BOOKING_ID,B.FINAL_PRICE,B.AMOUNT,ATYPE.DESCRIPTION AS ACCOM_TYPE,RT.TITLE AS ROOM_TYPE,B.START_DATE,B.END_DATE,CITY.CITY_NAME AS CITY,C.COUNTRY_NAME AS COUNTRY
	FROM BOOKING B
	JOIN BOOKING_HAS_PRODUCT BHP ON B.BOOKING_ID = BHP.BOOKING_ID
	JOIN PRODUCT P ON P.PID = BHP.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	JOIN COUNTRY C ON C.COUNTRY_NAME=CITY.COUNTRY_NAME
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	GROUP BY B.BOOKING_ID,B.FINAL_PRICE,B.AMOUNT,ATYPE.DESCRIPTION,RT.TITLE,B.START_DATE,B.END_DATE,CITY.CITY_NAME,C.COUNTRY_NAME
	) AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE>=@START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE<=@END_DATE)
GROUP BY 
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END
	ORDER BY
	CASE	
		WHEN @SORT = 'ASC' THEN SUM(T.FINAL_PRICE)
		WHEN @SORT = 'DESC' THEN SUM(T.FINAL_PRICE*-1)
		ELSE NULL
	END;


END;
GO
			--------ACC TYPE|R TYPE |CITY|CNTRY|TIME |SDATE|EDATE|SORT
--EXEC spIncomeReport NULL,NULL,NULL,NULL,'Weekly',NULL,NULL,NULL
--GO


-----------------------------OCCUPANCY REPORT---------------------!!!

IF OBJECT_ID(N'[dbo].spOccupancyReport','P')
IS NOT NULL
DROP PROCEDURE spOccupancyReport
GO
CREATE PROCEDURE spOccupancyReport
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE
AS
BEGIN
SET NOCOUNT ON;
	--SELECT PR.PID, CAST(CAST(SUM(PR.STOCK-PR.AVAILABILITY) AS DECIMAL(10,5))/CAST(SUM(PR.STOCK) AS DECIMAL(10,2))AS DECIMAL(3,2))*100
	--SELECT CAST(CAST(SUM(PR.STOCK-PR.AVAILABILITY)/CAST(SUM(STOCK) AS DECIMAL(10,3))*100 AS DECIMAL(6,3)) AS NVARCHAR(20))+'%' AS OCCUPANCY
	--FROM PRODUCT_RESERVE PR
	--GROUP BY PR.PID
		SELECT
		CAST(CAST(SUM(T.STOCK-T.AVAILABILITY)/CAST(SUM(T.STOCK) AS DECIMAL(16,4))*100 AS DECIMAL(16,4)) AS NVARCHAR(20))+'%' AS OCCUPANCY,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (
	SELECT PR.PID,PR.AVAILABILITY AS AVAILABILITY,PR.STOCK AS STOCK,ATYPE.DESCRIPTION AS ACCOM_TYPE,RT.TITLE AS ROOM_TYPE,CITY.CITY_NAME AS CITY, CITY.COUNTRY_NAME AS COUNTRY, PR.DATE AS START_DATE
	FROM PRODUCT_RESERVE PR
	JOIN PRODUCT P ON P.PID = PR.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	)AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE>=@START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE<=@END_DATE)
GROUP BY 
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END
	ORDER BY MIN(T.START_DATE)
END;
GO

EXEC spOccupancyReport  NULL,'GROUP',NULL,NULL,'Yearly',NULL,NULL
GO

IF OBJECT_ID(N'[dbo].spPeakOccupancyReport','P')
IS NOT NULL
DROP PROCEDURE spPeakOccupancyReport
GO
CREATE PROCEDURE spPeakOccupancyReport
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200)
AS
BEGIN
SET NOCOUNT ON;
		SELECT
		CAST(SUM(T.STOCK-T.AVAILABILITY)/CAST(SUM(T.STOCK) AS DECIMAL(16,4))*100 AS DECIMAL(16,4)) AS OCCUPANCY,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup--,
	/*CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY*/
FROM
    (
	SELECT PR.PID,PR.AVAILABILITY AS AVAILABILITY,PR.STOCK AS STOCK,ATYPE.DESCRIPTION AS ACCOM_TYPE,RT.TITLE AS ROOM_TYPE,CITY.CITY_NAME AS CITY, CITY.COUNTRY_NAME AS COUNTRY, PR.DATE AS START_DATE
	FROM PRODUCT_RESERVE PR
	JOIN PRODUCT P ON P.PID = PR.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	)AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
GROUP BY 
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END--,
	/*CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END*/
	ORDER BY OCCUPANCY DESC
END;
GO

--EXEC spPeakOccupancyReport NULL,NULL,NULL,NULL,NULL
--GO


--OCCUPANCY COMPARISON BY ROOM TYPE REPORT--
IF OBJECT_ID(N'[dbo].spOccupancyComparisonReport','P')
IS NOT NULL
DROP PROCEDURE spOccupancyComparisonReport
GO
CREATE PROCEDURE spOccupancyComparisonReport
	@TYPE_CODE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE
AS
BEGIN
SET NOCOUNT ON;
		SELECT
		T.ROOM_TYPE AS ROOM_TYPE,
		CAST(CAST(SUM(T.STOCK-T.AVAILABILITY)/CAST(SUM(T.STOCK) AS DECIMAL(16,4))*100 AS DECIMAL(16,4)) AS NVARCHAR(20))+'%' AS OCCUPANCY,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (
	SELECT PR.PID,PR.AVAILABILITY AS AVAILABILITY,PR.STOCK AS STOCK,ATYPE.DESCRIPTION AS ACCOM_TYPE,RT.TITLE AS ROOM_TYPE,CITY.CITY_NAME AS CITY, CITY.COUNTRY_NAME AS COUNTRY, PR.DATE AS START_DATE
	FROM PRODUCT_RESERVE PR
	JOIN PRODUCT P ON P.PID = PR.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	)AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE>=@START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE<=@END_DATE)
GROUP BY 
		T.ROOM_TYPE,
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END
	ORDER BY MIN(T.START_DATE)
END;
GO

--EXEC spOccupancyComparisonReport null,null,null,'Weekly',null,null
--GO




--------------------------------------------------------ROOM OCCUPANCY---------------------------------------------------------
IF OBJECT_ID(N'[dbo].spRoomOccupancyReport','P')
IS NOT NULL
DROP PROCEDURE spRoomOccupancyReport
GO
CREATE PROCEDURE spRoomOccupancyReport
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE
AS
BEGIN
SET NOCOUNT ON;
		SELECT
		--CAST(CAST(SUM(T.STOCK-T.AVAILABILITY)/CAST(SUM(T.STOCK) AS DECIMAL(16,4))*100 AS DECIMAL(16,4)) AS NVARCHAR(20))+'%' AS OCCUPANCY,
		SUM(T.STOCK-T.AVAILABILITY) AS 'BOOKED (rooms x days)', SUM(T.STOCK) AS 'STOCK (rooms x days)',
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	T.ROOM_TYPE AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (
	SELECT PR.PID,PR.AVAILABILITY AS AVAILABILITY,PR.STOCK AS STOCK,ATYPE.DESCRIPTION AS ACCOM_TYPE,RT.TITLE AS ROOM_TYPE,CITY.CITY_NAME AS CITY, CITY.COUNTRY_NAME AS COUNTRY, PR.DATE AS START_DATE
	FROM PRODUCT_RESERVE PR
	JOIN PRODUCT P ON P.PID = PR.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID
	)AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE>=@START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE<=@END_DATE)
GROUP BY T.ROOM_TYPE,
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END
	ORDER BY MIN(T.START_DATE)
END;
GO
--EXEC spRoomOccupancyReport null,null,null,null,'Weekly',null,null

-----BOOKING STATISTICS REPORT-----------


IF OBJECT_ID (N'[dbo].spBookingTotalStatistics','P')
IS NOT NULL
DROP PROCEDURE spBookingTotalStatistics
GO

CREATE PROCEDURE spBookingTotalStatistics
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE
AS
BEGIN
	SET NOCOUNT ON;
	

SELECT
	COUNT(*) AS BOOKINGS,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (SELECT B.BOOKING_ID AS Bookings,ATYPE.[DESCRIPTION] AS ACCOM_TYPE,RT.Title AS ROOM_TYPE,B.START_DATE,B.END_DATE,CITY.CITY_NAME AS CITY,C.COUNTRY_NAME AS COUNTRY
	FROM dbo.BOOKING B 
	JOIN BOOKING_HAS_PRODUCT BHP ON B.BOOKING_ID = BHP.BOOKING_ID
	JOIN PRODUCT P ON P.PID = BHP.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID JOIN COUNTRY C ON C.COUNTRY_NAME=CITY.COUNTRY_NAME
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	WHERE [CANCELLED] = 0
	GROUP BY B.BOOKING_ID,ATYPE.DESCRIPTION,RT.TITLE,B.START_DATE,B.END_DATE,CITY.CITY_NAME,C.COUNTRY_NAME) AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE>=@START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE<=@END_DATE)
GROUP BY 
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END	
	ORDER BY
		CASE
        WHEN @TIME_FILTER IS NOT NULL THEN MIN(T.START_DATE)
    END;



END;
GO


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------




-----BOOKING TRENDS-------

IF OBJECT_ID (N'[dbo].spBookingTrendsStatistics','P')
IS NOT NULL
DROP PROCEDURE spBookingTrendsStatistics
GO

CREATE PROCEDURE spBookingTrendsStatistics
		@TIME_FILTER NVARCHAR(200),
		@START_DATE DATE,
		@END_DATE DATE
AS
BEGIN
SET NOCOUNT ON;
	--Booking Trends Percentage--
	SELECT
		ACC_T.[DESCRIPTION],
        COUNT(B.BOOKING_ID) AS BookingCount,
        CAST(COUNT(B.BOOKING_ID) * 100.0 / SUM(COUNT(B.BOOKING_ID)) OVER () AS DECIMAL(5, 2)) AS Percentage,
		CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(B.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, B.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,B.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, B.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,B.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, B.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,B.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, B.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup
    FROM
        dbo.[BOOKING] B 
				JOIN dbo.[BOOKING_HAS_PRODUCT] BP ON B.BOOKING_ID = BP.BOOKING_ID 
				JOIN dbo.[PRODUCT] P ON P.PID = BP.PID 
				JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
				JOIN dbo.ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
				JOIN dbo.ACCOMMODATION_TYPE ACC_T ON ACC_T.CODE = A.TYPE_CODE
	WHERE
		(@START_DATE IS NULL OR B.START_DATE >= @START_DATE)
		AND
		(@END_DATE IS NULL OR B.START_DATE <= @END_DATE)
    GROUP BY
		ACC_T.[DESCRIPTION],
		CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(B.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, B.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,B.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, B.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,B.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, B.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,B.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, B.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END		
END;
GO


------CANCELLATION STATISTICS REPORT-----------

IF OBJECT_ID (N'[dbo].spBookingCancellationStatistics','P')
IS NOT NULL
DROP PROCEDURE spBookingCancellationStatistics
GO

CREATE PROCEDURE spBookingCancellationStatistics
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @ALL_BOOKINGS INT
	SET @ALL_BOOKINGS = (SELECT COUNT(*) FROM BOOKING)

	
	SELECT
	CAST(CAST(COUNT(*) * 100.0 /@ALL_BOOKINGS AS DECIMAL(5,2)) AS NVARCHAR(7))+'%' AS CANCELLATIONS,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (SELECT B.BOOKING_ID ,ATYPE.[DESCRIPTION] AS ACCOM_TYPE,RT.Title AS ROOM_TYPE,B.START_DATE,B.END_DATE,CITY.CITY_NAME AS CITY,C.COUNTRY_NAME AS COUNTRY
	FROM dbo.BOOKING B 
	JOIN BOOKING_HAS_PRODUCT BHP ON B.BOOKING_ID = BHP.BOOKING_ID
	JOIN PRODUCT P ON P.PID = BHP.PID
	JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN CITY ON CITY.CITY_ID = A.CITY_ID JOIN COUNTRY C ON C.COUNTRY_NAME=CITY.COUNTRY_NAME
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE = A.TYPE_CODE
	WHERE [CANCELLED] = 1
	GROUP BY B.BOOKING_ID,ATYPE.DESCRIPTION,RT.TITLE,B.START_DATE,B.END_DATE,CITY.CITY_NAME,C.COUNTRY_NAME) AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE >= @START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE <= @END_DATE)
GROUP BY 
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END	
	ORDER BY
		CASE
        WHEN @TIME_FILTER IS NOT NULL THEN MIN(T.START_DATE)
    END;

			
END;
GO


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

IF OBJECT_ID (N'[dbo].spAverageRating','P')
IS NOT NULL
DROP PROCEDURE spAverageRating
GO

CREATE PROCEDURE spAverageRating
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE,
	@SortOrder NVARCHAR(10) --ASCENDING FOR TOP 10,DESCENDING FOR WORST 10
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @ALL_BOOKINGS INT
	SET @ALL_BOOKINGS = (SELECT COUNT(*) FROM BOOKING)


	SELECT * FROM
	(
	SELECT
	T.[ACCOM_NAME] AS ACCOM_NAME, CAST(AVG(CAST(T.RATING AS DECIMAL(4,2)))AS DECIMAL(4,2))  AS AverageRating,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (SELECT B.BOOKING_ID AS BOOKING_ID,B.RATING AS RATING,A.NAME AS ACCOM_NAME,RT.TITLE AS ROOM_TYPE,ATYPE.DESCRIPTION AS ACCOM_TYPE,CITY.CITY_NAME AS CITY,CITY.COUNTRY_NAME AS COUNTRY,START_DATE
	FROM 
	BOOKING_HAS_PRODUCT BHP
	JOIN PRODUCT P ON P.PID = BHP.PID
	JOIN BOOKING B ON B.BOOKING_ID = BHP.BOOKING_ID
	JOIN ROOM_TYPE RT ON P.ROOM_CODE = RT.CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE=A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID=A.CITY_ID
 GROUP BY B.BOOKING_ID,B.RATING,A.NAME,RT.TITLE,ATYPE.DESCRIPTION,CITY.CITY_NAME,CITY.COUNTRY_NAME,B.START_DATE) AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE >= @START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE <= @END_DATE)
GROUP BY 
	T.ACCOM_NAME,
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END	
	) AS T2
	ORDER BY
		CASE WHEN @SortOrder = 'Asc' THEN AverageRating END ASC,
		CASE WHEN @SortOrder = 'Desc' THEN AverageRating END DESC;
	

	

			
END;
GO


-------REVIEW	STATISTICS-----------

IF OBJECT_ID (N'[dbo].spAverageRatingTop','P')
IS NOT NULL
DROP PROCEDURE spAverageRatingTop
GO

CREATE PROCEDURE spAverageRatingTop
	@TYPE_CODE_FILTER NVARCHAR(200),
	@ROOM_TYPE_FILTER NVARCHAR(200),
	@CITY_FILTER NVARCHAR(200),
	@COUNTRY_FILTER NVARCHAR(200),
	@TIME_FILTER NVARCHAR(200),
	@START_DATE DATE,
	@END_DATE DATE,
	@SortOrder NVARCHAR(10) --ASCENDING FOR TOP 10,DESCENDING FOR WORST 10
	
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @ALL_BOOKINGS INT
	SET @ALL_BOOKINGS = (SELECT COUNT(*) FROM BOOKING)


	SELECT TOP 10
	ACCOM_NAME, AverageRating,TimeGroup, ACCOM_TYPE, ROOM_TYPE, CITY, COUNTRY
	FROM
	(
	SELECT
	T.[ACCOM_NAME] AS ACCOM_NAME, CAST(AVG(CAST(T.RATING AS DECIMAL(4,2)))AS DECIMAL(4,2))  AS AverageRating,
   CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END AS TimeGroup,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END AS ACCOM_TYPE,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END AS ROOM_TYPE,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END AS CITY,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END AS COUNTRY
FROM
    (SELECT B.BOOKING_ID AS BOOKING_ID,B.RATING AS RATING,A.NAME AS ACCOM_NAME,RT.TITLE AS ROOM_TYPE,ATYPE.DESCRIPTION AS ACCOM_TYPE,CITY.CITY_NAME AS CITY,CITY.COUNTRY_NAME AS COUNTRY,START_DATE
	FROM 
	BOOKING_HAS_PRODUCT BHP
	JOIN PRODUCT P ON P.PID = BHP.PID
	JOIN BOOKING B ON B.BOOKING_ID = B.BOOKING_ID
	JOIN ROOM_TYPE RT ON P.ROOM_CODE = RT.CODE
	JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
	JOIN ACCOMMODATION_TYPE ATYPE ON ATYPE.CODE=A.TYPE_CODE
	JOIN CITY ON CITY.CITY_ID=A.CITY_ID
 GROUP BY B.BOOKING_ID,B.RATING,A.NAME,RT.TITLE,ATYPE.DESCRIPTION,CITY.CITY_NAME,CITY.COUNTRY_NAME,B.START_DATE) AS T
WHERE
    (@TYPE_CODE_FILTER IS NULL OR @TYPE_CODE_FILTER ='GROUP' OR T.ACCOM_TYPE = @TYPE_CODE_FILTER)
	AND
	(@ROOM_TYPE_FILTER IS NULL OR @ROOM_TYPE_FILTER ='GROUP' OR T.ROOM_TYPE = @ROOM_TYPE_FILTER)
	AND
	(@CITY_FILTER IS NULL OR @CITY_FILTER ='GROUP' OR T.CITY = @CITY_FILTER)
	AND
	(@COUNTRY_FILTER IS NULL OR @COUNTRY_FILTER ='GROUP' OR T.COUNTRY = @COUNTRY_FILTER)
	AND
	(@START_DATE IS NULL OR T.START_DATE >= @START_DATE)
	AND
	(@END_DATE IS NULL OR T.START_DATE <= @END_DATE)
GROUP BY 
	T.ACCOM_NAME,
    CASE 
		WHEN @TIME_FILTER = 'Daily' THEN CAST(T.START_DATE AS NVARCHAR(10))
        WHEN @TIME_FILTER = 'Weekly' THEN CAST(DATEPART(WEEK, T.START_DATE) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
		WHEN @TIME_FILTER = 'Monthly' THEN CAST(DATEPART(MONTH, T.START_DATE)AS NVARCHAR(10))+ '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Trimonthly' THEN  CAST((DATEPART(QUARTER, T.START_DATE)) AS NVARCHAR(10)) + '-' +  CAST(DATEPART(YEAR,T.START_DATE) AS NVARCHAR(4))
        WHEN @TIME_FILTER = 'Yearly' THEN CAST(DATEPART(YEAR, T.START_DATE) AS NVARCHAR(10))
        ELSE NULL
    END,
	CASE
		WHEN @TYPE_CODE_FILTER = 'GROUP' THEN T.ACCOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @ROOM_TYPE_FILTER = 'GROUP' THEN T.ROOM_TYPE
		ELSE NULL
		END,
	CASE
		WHEN @CITY_FILTER = 'GROUP' THEN T.CITY
		ELSE NULL
		END,
	CASE
		WHEN @COUNTRY_FILTER = 'GROUP' THEN T.COUNTRY
		ELSE NULL
		END	
	) AS T2
	ORDER BY
		CASE WHEN @SortOrder = 'Asc' THEN AverageRating END ASC,
		CASE WHEN @SortOrder = 'Desc' THEN AverageRating END DESC;
	

	

			
END;
GO
-----------PERFOMANCE REPORT 1-----------
IF OBJECT_ID(N'[dbo].spPerformanceReport1','P')
IS NOT NULL
DROP PROCEDURE spPerformanceReport1
GO
CREATE PROCEDURE spPerformanceReport1
    @StartDate DATE,
    @EndDate DATE,
    @Acc_id INT
AS
BEGIN
    SET NOCOUNT ON;
    WITH CTE_RoomsWithAvailability AS (
    SELECT
        P.ROOM_CODE,
        RT.TITLE,
        RT.NOTES,
        MAX(PR.STOCK - PR.AVAILABILITY) AS '#OF ROOMS STAYED IN' --/ (DATEDIFF(day, @StartDate, @EndDate) + 1) 
    FROM
        PRODUCT_RESERVE PR
    JOIN PRODUCT P ON P.PID = PR.PID
    JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
    JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
    WHERE
        A.ACC_ID = @Acc_id
        AND PR.DATE >= @StartDate
        AND PR.DATE <= @EndDate
        AND PR.STOCK - PR.AVAILABILITY > 0
    GROUP BY
        P.ROOM_CODE,
        RT.NOTES,
        RT.TITLE
    HAVING
        COUNT(DISTINCT PR.DATE) = DATEDIFF(day, @StartDate, @EndDate) + 1
),
CTE_RoomsNoAvailability AS (
    SELECT
        P.ROOM_CODE,
        RT.TITLE,
        RT.NOTES,
        MAX(PR.STOCK - PR.AVAILABILITY) AS '#OF ROOMS STAYED IN'
    FROM
        PRODUCT_RESERVE PR
    JOIN PRODUCT P ON P.PID = PR.PID
    JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
    JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
    WHERE
        A.ACC_ID = @Acc_id
        AND PR.DATE >= @StartDate
        AND PR.DATE <= @EndDate
        AND PR.STOCK - PR.AVAILABILITY = 0
    GROUP BY
        P.ROOM_CODE,
        RT.NOTES,
        RT.TITLE
    HAVING
        COUNT(DISTINCT PR.DATE) = DATEDIFF(day, @StartDate, @EndDate) + 1
)

SELECT * FROM CTE_RoomsWithAvailability
UNION
SELECT * FROM CTE_RoomsNoAvailability;

END;
GO

--SELECT * FROM BOOKING ORDER BY BOOKING.START_DATE


-----------PERFOMANCE REPORT 2-----------

IF OBJECT_ID (N'[dbo].spPerformanceReport2','P')
IS NOT NULL
DROP PROCEDURE spPerformanceReport2
GO

CREATE PROCEDURE spPerformanceReport2
	@Accom_ID INT,
	@Year INT
	
AS
BEGIN
	SET NOCOUNT ON;
	
WITH CTE_BookingData AS (
    SELECT
        B.BOOKING_ID,
        A.ACC_ID,
        A.NAME,
        P.ROOM_CODE,
        RT.TITLE,
        B.START_DATE
    FROM
        BOOKING B
    JOIN BOOKING_HAS_PRODUCT BHP ON BHP.BOOKING_ID = B.BOOKING_ID
    JOIN PRODUCT P ON P.PID = BHP.PID
    JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
    JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
    GROUP BY
        B.BOOKING_ID, A.ACC_ID, A.NAME, P.ROOM_CODE, RT.TITLE, B.START_DATE
)

SELECT
    T.TITLE,
    T.ROOM_CODE
FROM
    CTE_BookingData T
WHERE
    T.ACC_ID = @Accom_ID
    AND YEAR(T.START_DATE) = @Year
GROUP BY
    T.ROOM_CODE, T.TITLE
HAVING
    COUNT(DISTINCT MONTH(T.START_DATE)) = 12;


END;
GO


-----------PERFOMANCE REPORT 3-----------

IF OBJECT_ID (N'[dbo].spPerformanceReport3','P')
IS NOT NULL
DROP PROCEDURE spPerformanceReport3
GO

CREATE PROCEDURE spPerformanceReport3
	@Accom_ID INT,
	@YEAR INT,
	@Amount INT
	
AS
BEGIN
	SET NOCOUNT ON;
	
	WITH CTE_BookingData AS (
    SELECT
        B.BOOKING_ID,
        A.ACC_ID,
        A.NAME,
        P.ROOM_CODE,
        RT.TITLE,
        B.START_DATE
    FROM
        BOOKING B
    JOIN BOOKING_HAS_PRODUCT BHP ON BHP.BOOKING_ID = B.BOOKING_ID
    JOIN PRODUCT P ON P.PID = BHP.PID
    JOIN ROOM_TYPE RT ON RT.CODE = P.ROOM_CODE
    JOIN ACCOMMODATION A ON A.ACC_ID = RT.ACC_ID
    GROUP BY
        B.BOOKING_ID, A.ACC_ID, A.NAME, P.ROOM_CODE, RT.TITLE, B.START_DATE
)

	SELECT
		T.TITLE,
		T.ROOM_CODE
	FROM
		CTE_BookingData T
	WHERE
		T.ACC_ID = @Accom_ID
		AND YEAR(T.START_DATE) = @YEAR
	GROUP BY
		T.ROOM_CODE, T.TITLE
	HAVING
		COUNT(DISTINCT T.BOOKING_ID) >= @Amount;

END;
GO






----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------



--===========================================================================================================================================================================================================================================--
------------------------------------------------------------------------------------------------------------END OF REPORTS-------------------------------------------------------------------------------------------------------
--===========================================================================================================================================================================================================================================--



--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
-----------------------------------ORESTIS--------------------------------|
--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
--*************************** INSERT USER *************** ( REGISTER)

IF OBJECT_ID (N'[dbo].spInsertUser','P')
IS NOT NULL
DROP PROCEDURE spInsertUser
GO
CREATE PROCEDURE spInsertUser
    @Fname NVARCHAR(20),
	@Minit NVARCHAR(1),
    @Lname NVARCHAR(30),
	@BDATE DATE,
	@SEX   CHAR,
	@Username VARCHAR(30),
	@Email VARCHAR(40),
	@Password VARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;
	IF (PATINDEX('%[0-9]%', @Fname) = 0 AND (PATINDEX('%[0-9]%', @Minit) = 0 OR @Minit IS NULL )AND PATINDEX('%[0-9]%', @Lname) = 0)
	AND (LEN(@Username) > 0) AND (LEN(@Password) > 0) AND (LEN(@Fname) > 1) AND (LEN(@Lname) > 0)
    BEGIN
        -- Check if the email already exists
        IF NOT EXISTS (SELECT 1 FROM dbo.[USER] WHERE [USER].EMAIL = @Email) AND @Email LIKE '%@%.%'
    AND @Email NOT LIKE '%@%@%'
    AND @Email NOT LIKE '%.@%'
    AND @Email NOT LIKE '%..%'
    AND CHARINDEX(' ', @Email) = 0
        BEGIN
		DECLARE @HashedPassword VARBINARY(256);
		SET @HashedPassword = HASHBYTES('SHA2_256', @Password);
            -- Insert the user if the email doesn't exist
            INSERT INTO dbo.[USER] (FNAME,MINIT, LNAME, BDATE, SEX, USERNAME, EMAIL, [PASSWORD],LAST_LOGIN, VERIFIED,UROLE)
            VALUES (@Fname, @Minit, @Lname, @BDATE, @SEX, @Username, @Email, @HashedPassword, GETDATE(), 1,'U');
        END
	
        ELSE
        BEGIN
            -- Raise an error if the email already exists
            RAISERROR('Email already exists or Invalid Email. Please choose a different email.', 16, 1);
        END 
    END
	ELSE
    BEGIN
        -- Raise an error if Fname, Minit, or Lname contains numbers
        RAISERROR('Fname, Minit, or Lname Invalid/Empty or Username/Password Empty .', 16, 1);
    END 
END;
GO



----INSERT MANAGER(REGISTER) ----------

IF OBJECT_ID (N'[dbo].spInsertManager','P')
IS NOT NULL
DROP PROCEDURE spInsertManager
GO
CREATE PROCEDURE spInsertManager
    @Fname NVARCHAR(20),
	@Minit NVARCHAR(1),
    @Lname NVARCHAR(30),
	@BDATE DATE,
	@SEX   CHAR,
	@Username VARCHAR(30),
	@Email VARCHAR(40),
	@Password VARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;
	IF (PATINDEX('%[0-9]%', @Fname) = 0 AND (PATINDEX('%[0-9]%', @Minit) = 0 OR @Minit IS NULL )AND PATINDEX('%[0-9]%', @Lname) = 0)
	AND (LEN(@Username) > 0) AND (LEN(@Password) > 0) AND (LEN(@Fname) > 1) AND (LEN(@Lname) > 0)
    BEGIN
        -- Check if the email already exists
        IF NOT EXISTS (SELECT 1 FROM dbo.[USER] WHERE [USER].EMAIL = @Email) AND @Email LIKE '%@%.%'
    AND @Email NOT LIKE '%@%@%'
    AND @Email NOT LIKE '%.@%'
    AND @Email NOT LIKE '%..%'
    AND CHARINDEX(' ', @Email) = 0
        BEGIN
			DECLARE @HashedPassword VARBINARY(256);
			SET @HashedPassword = HASHBYTES('SHA2_256', @Password);
            -- Insert the user if the email doesn't exist
            INSERT INTO dbo.[USER] (FNAME,MINIT, LNAME, BDATE, SEX, USERNAME, EMAIL, [PASSWORD],LAST_LOGIN, VERIFIED,UROLE)
            VALUES (@Fname, @Minit, @Lname, @BDATE, @SEX, @Username, @Email, @HashedPassword, GETDATE(), 0,'M');
        END
	
        ELSE
        BEGIN
            -- Raise an error if the email already exists
            RAISERROR('Email already exists or Invalid Email. Please choose a different email.', 16, 1);
        END 
    END
	ELSE
    BEGIN
        -- Raise an error if Fname, Minit, or Lname contains numbers
        RAISERROR('Fname, Minit, or Lname Invalid/Empty or Username/Password Empty .', 16, 1);
    END 
END;
GO

--INSERT ADMIN-------------------------
IF OBJECT_ID (N'[dbo].spInsertAdmin','P')
IS NOT NULL
DROP PROCEDURE spInsertAdmin
GO
CREATE PROCEDURE spInsertAdmin
    @Fname NVARCHAR(20),
    @Minit NVARCHAR(1),
    @Lname NVARCHAR(30),
    @BDATE DATE,
    @SEX   CHAR,
    @Username VARCHAR(30),
    @Email VARCHAR(40),
    @Password VARCHAR(255)

AS
BEGIN
    SET NOCOUNT ON;
    IF (PATINDEX('%[0-9]%', @Fname) = 0 AND (PATINDEX('%[0-9]%', @Minit) = 0 OR @Minit IS NULL )AND PATINDEX('%[0-9]%', @Lname) = 0)
    AND (LEN(@Username) > 0) AND (LEN(@Password) > 0) AND (LEN(@Fname) > 1) AND (LEN(@Lname) > 0)
    BEGIN
        -- Check if the email already exists
        IF NOT EXISTS (SELECT 1 FROM dbo.[USER] WHERE [USER].EMAIL = @Email) AND @Email LIKE '%@%.%'
    AND @Email NOT LIKE '%@%@%'
    AND @Email NOT LIKE '%.@%'
    AND @Email NOT LIKE '%..%'
    AND CHARINDEX(' ', @Email) = 0
        BEGIN
        DECLARE @HashedPassword VARBINARY(256);
        SET @HashedPassword = HASHBYTES('SHA2_256', @Password);
            -- Insert the user if the email doesn't exist
            INSERT INTO dbo.[USER] (FNAME,MINIT, LNAME, BDATE, SEX, USERNAME, EMAIL, [PASSWORD],LAST_LOGIN, VERIFIED,UROLE)
            VALUES (@Fname, @Minit, @Lname, @BDATE, @SEX, @Username, @Email, @HashedPassword, GETDATE(),1,'A');
        END

        ELSE
        BEGIN
            -- Raise an error if the email already exists
            RAISERROR('Email already exists or Invalid Email. Please choose a different email.', 16, 1);
        END 
    END
    ELSE
    BEGIN
        -- Raise an error if Fname, Minit, or Lname contains numbers
        RAISERROR('Fname, Minit, or Lname Invalid/Empty or Username/Password Empty .', 16, 1);
    END 
END;
GO

----LOGIN----------

IF OBJECT_ID (N'[dbo].spLogin','P')
IS NOT NULL
DROP PROCEDURE spLogin
GO
CREATE PROCEDURE spLogin
	@Email VARCHAR(40),
	@Password VARCHAR(255)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @HashedPassword VARBINARY(256);
	SET @HashedPassword = HASHBYTES('SHA2_256', @Password);

	IF EXISTS ( SELECT 1 FROM dbo.[USER] U WHERE U.EMAIL=@Email AND U.[PASSWORD] = @HashedPassword AND U.VERIFIED = 1)
	BEGIN
	SELECT U.USER_ID,U.USERNAME,U.UROLE FROM dbo.[USER] U WHERE U.EMAIL = @Email
	UPDATE dbo.[USER]
        SET LAST_LOGIN = GETDATE()  
        WHERE EMAIL = @Email;
	PRINT 'Login successful.';
	END
	ELSE
	BEGIN
	RAISERROR('Invalid Username or Password',16,1);
	END
END;
GO
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------


---Create new Accomodation Type-----

IF OBJECT_ID (N'[dbo].spCreateAccommodationType','P')
IS NOT NULL
DROP PROCEDURE spCreateAccommodationType
GO
CREATE PROCEDURE spCreateAccommodationType
	@ManagerID INT,
	@Description NVARCHAR(500)
AS
BEGIN
SET NOCOUNT ON;
	 IF EXISTS (SELECT 1 FROM dbo.[ACCOMMODATION_TYPE] WHERE [DESCRIPTION] = @Description)
    BEGIN
        RAISERROR('Error: Accommodation already exists.', 16, 1);
    END
    ELSE
    BEGIN
        INSERT INTO dbo.[ACCOMMODATION_TYPE] ([DESCRIPTION]) VALUES (@Description);

		--INSERT INTO AUDIT MANAGER--
		INSERT INTO dbo.[AUDIT_MANAGER](MANAGER_ID,[DESCRIPTION],[DATE])
		VALUES (@ManagerID,'Added Accomodation Type',GETDATE());
    END
END;
GO


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------


----Create new Contact Person----




IF OBJECT_ID (N'[dbo].spCreateContactPerson','P')
IS NOT NULL
DROP PROCEDURE spCreateContactPerson
GO
CREATE PROCEDURE spCreateContactPerson
	@ManagerID INT,
	@Fname NVARCHAR(30),
	@Lname NVARCHAR(40),
	@Phone varchar(20)
AS
BEGIN
	 IF EXISTS (SELECT 1 FROM dbo.[CONTACT_PERSON] CP WHERE CP.PHONE = @Phone)
    BEGIN
        RAISERROR('Error: Contact Person with this number already exists.', 16, 1);
    END
    ELSE
    BEGIN
        INSERT INTO dbo.[CONTACT_PERSON] ([FNAME],[LNAME],[PHONE]) VALUES (@Fname,@Lname,@Phone);


		DECLARE @ID INT
		SET @ID=SCOPE_IDENTITY()

		--INSERT INTO AUDIT MANAGER--
		INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
		VALUES(@ManagerID,'Added Contact Person',GETDATE());


		SELECT *
		FROM CONTACT_PERSON C
		WHERE CONTACT_ID=@ID


    END
END;
GO


--SELECT * FROM dbo.[CONTACT_PERSON] ORDER BY [CONTACT_ID] ASC;


----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------


----INSERT ACCOMODATION----


IF OBJECT_ID (N'[dbo].spInsertAccommodation','P')
IS NOT NULL
DROP PROCEDURE spInsertAccommodation
GO
CREATE PROCEDURE spInsertAccommodation
	@ManagerID INT,
	@User_ID INT,
	@Name NVARCHAR(50),
	@Lat DECIMAL(9,6),
	@Lon DECIMAL(9,6),
	@Address NVARCHAR(100),
	@Contact_ID INT,
	@Type_code INT,
	@CityID INT,
	@Facilities NVARCHAR(1000),
	@Policies NVARCHAR(1000)
AS
BEGIN
	SET NOCOUNT ON;


	DECLARE @InsertedAccommodationID INT;

	INSERT INTO dbo.[ACCOMMODATION]([NAME],[LAT],[LON],[ADDRESS],[CONTACT_ID],[TYPE_CODE],[CITY_ID]) VALUES (@Name,@Lat,@Lon,@Address,@Contact_ID,@Type_code,@CityID)

	SET @InsertedAccommodationID = SCOPE_IDENTITY();

	DECLARE @FacilitiesTable TABLE (FID INT);
	INSERT INTO @FacilitiesTable (FID)
	SELECT *
	FROM STRING_SPLIT(@Facilities, ',');

	INSERT INTO dbo.[ACC_PROVIDES_FACILITY] (ACCOM_ID, CODE)
	SELECT @InsertedAccommodationID,* FROM @FacilitiesTable

	DECLARE @PoliciesTable TABLE (FID INT);
	INSERT INTO @PoliciesTable (FID)
	SELECT *
	FROM STRING_SPLIT(@Policies, ',');

	INSERT INTO dbo.[ACC_HAS_POLICY] (ACCOM_ID, CODE)
	SELECT @InsertedAccommodationID,* FROM @PoliciesTable


	INSERT INTO dbo.[MANAGES]([USER_ID],[ACCOM_ID]) VALUES (@User_ID,@InsertedAccommodationID);

	--INSERT INTO AUDIT MANAGER--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Added Accomodation',GETDATE());
END;
GO


---GET PRICE CATEGORY-----

IF OBJECT_ID (N'[dbo].spGetPriceCategory','P')
IS NOT NULL
DROP PROCEDURE spGetPriceCategory
GO

CREATE PROCEDURE spGetPriceCategory
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT * FROM dbo.PRICE_CATEGORY 
	
END;
GO


--------UPDATE CONTACT PERSON-----------

IF OBJECT_ID(N'[dbo].spUpdateContactPerson','P')
IS NOT NULL
DROP PROCEDURE spUpdateContactPerson
GO
CREATE PROCEDURE spUpdateContactPerson
	@ManagerID INT,
	@ContactID INT,
	@Phone varchar(20)
AS
BEGIN
SET NOCOUNT ON;
	UPDATE dbo.[CONTACT_PERSON] 
	SET [PHONE] = @Phone
	WHERE [CONTACT_ID] = @ContactID;

	--INSERT INTO AUDIT TABLE--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Updated Contact Person Phone',GETDATE());
END;
GO


-----------------UPDATE ACCOMODATION NAME-----------------

IF OBJECT_ID(N'[dbo].spUpdateAccommodationName','P')
IS NOT NULL
DROP PROCEDURE spUpdateAccommodationName
GO
CREATE PROCEDURE spUpdateAccommodationName
	@ManagerID INT,
	@AccomodationID INT,
	@Name nvarchar(50)
AS
BEGIN
SET NOCOUNT ON;
	UPDATE dbo.[ACCOMMODATION] 
	SET [NAME] = @Name
	WHERE [ACC_ID] = @AccomodationID



	--INSERT INTO AUDIT TABLE--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Updated Accommodation Name',GETDATE());
END;
GO



-----------------UPDATE ACCOMODATION CONTACT PERSON-----------------


IF OBJECT_ID(N'[dbo].spUpdateAccommodationContactPerson','P')
IS NOT NULL
DROP PROCEDURE spUpdateAccommodationContactPerson
GO
CREATE PROCEDURE spUpdateAccommodationContactPerson
	@ManagerID INT,
	@AccomodationID INT,
	@ContactID	INT
AS
BEGIN
SET NOCOUNT ON;
	UPDATE dbo.[ACCOMMODATION] 
	SET [CONTACT_ID] = @ContactID
	WHERE [ACC_ID] = @AccomodationID



	--INSERT INTO AUDIT TABLE--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Updated Accommodation Contact Person',GETDATE());
END;
GO


-------------UPDATE ROOM TYPE DESCRIPTION-------------------

IF OBJECT_ID(N'[dbo].spUpdateRoomTypeNotes','P')
IS NOT NULL
DROP PROCEDURE spUpdateRoomTypeNotes
GO
CREATE PROCEDURE spUpdateRoomTypeNotes
	@ManagerID INT,
	@Code INT,
	@Notes NVARCHAR(500)
AS
BEGIN
SET NOCOUNT ON;
	UPDATE dbo.[ROOM_TYPE] 
	SET [NOTES] = @Notes
	WHERE [CODE] = @Code

	--INSERT INTO AUDIT TABLE--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Updated Room Type Notes',GETDATE());
END;
GO

-------------UPDATE STOCK------------------

IF OBJECT_ID(N'[dbo].spUpdateProductReserve','P')
IS NOT NULL
DROP PROCEDURE spUpdateProductReserve
GO
CREATE PROCEDURE spUpdateProductReserve
	@ManagerID INT,
	@PID INT,
	@STOCK INT
AS
BEGIN
SET NOCOUNT ON;
	UPDATE dbo.[PRODUCT_RESERVE] 
	SET [STOCK] = @STOCK
	WHERE [PID] = @PID AND [DATE]>=GETDATE()


	--INSERT INTO AUDIT TABLE--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Updated Product Stock',GETDATE());
END;
GO

------INSERT FACILITY----------
IF OBJECT_ID (N'[dbo].spInsertFacility','P')
IS NOT NULL
DROP PROCEDURE spInsertFacility
GO

CREATE PROCEDURE spInsertFacility
	@ManagerID INT,
	@Description NVARCHAR(500),
	@Notes NVARCHAR(500)

AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (
        SELECT 1
        FROM dbo.FACILITIES
        WHERE [DESCRIPTION] = @Description
    )
    BEGIN
        
        RAISERROR('This facility already exists.', 16, 1);
    END
    ELSE
    BEGIN
        
        INSERT INTO dbo.FACILITIES ([DESCRIPTION],[NOTES])
        VALUES (@Description,@Notes);

        -- INSERT AUDIT MANAGER
        INSERT INTO dbo.[AUDIT_MANAGER] ([MANAGER_ID], [DESCRIPTION], [DATE])
        VALUES (@ManagerID, 'Added Facility', GETDATE());
    END
END;
GO


------INSERT AMENITY----------
IF OBJECT_ID (N'[dbo].spInsertAmenity','P')
IS NOT NULL
DROP PROCEDURE spInsertAmenity
GO

CREATE PROCEDURE spInsertAmenity
	@ManagerID INT,
	@Description NVARCHAR(100)
	
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (
        SELECT 1
        FROM dbo.AMENITY
        WHERE [DESCRIPTION] = @Description
    )
    BEGIN
        
        RAISERROR('This amenity already exists.', 16, 1);
    END
    ELSE
    BEGIN
        
        INSERT INTO dbo.AMENITY ([DESCRIPTION])
        VALUES (@Description);

        -- INSERT AUDIT MANAGER
        INSERT INTO dbo.[AUDIT_MANAGER] ([MANAGER_ID], [DESCRIPTION], [DATE])
        VALUES (@ManagerID, 'Added Amenity', GETDATE());
    END
END;
GO

-----------INSERT TERMS-----------


IF OBJECT_ID (N'[dbo].spInsertTerm','P')
IS NOT NULL
DROP PROCEDURE spInsertTerm
GO

CREATE PROCEDURE spInsertTerm
	@ManagerID INT,
	@Description NVARCHAR(500)
	
AS
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS (
        SELECT 1
        FROM dbo.TERMS
        WHERE [DESCRIPTION] = @Description
    )
    BEGIN
        RAISERROR('This term already exists.', 16, 1);
    END
    ELSE
    BEGIN
        
        INSERT INTO dbo.TERMS ([DESCRIPTION])
        VALUES (@Description);
	
	--INSERT AUDIT MANAGER--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Added Term',GETDATE());
	END
END;
GO

-------INSERT ACCOMODATION POLICY------------


IF OBJECT_ID (N'[dbo].spInsertAccommodationPolicy','P')
IS NOT NULL
DROP PROCEDURE spInsertAccommodationPolicy
GO

CREATE PROCEDURE spInsertAccommodationPolicy
	@ManagerID INT,
	@Description NVARCHAR(500)
	
AS
BEGIN
	SET NOCOUNT ON;

	 IF EXISTS (
        SELECT 1
        FROM dbo.ACCOMMODATION_POLICY
        WHERE [DESCRIPTION] = @Description
    )
    BEGIN
        RAISERROR('This accommodation policy already exists.', 16, 1);
    END
    ELSE
    BEGIN
        
        INSERT INTO dbo.ACCOMMODATION_POLICY ([DESCRIPTION])
        VALUES (@Description);
	END
	--INSERT AUDIT MANAGER--
	INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
	VALUES(@ManagerID,'Added Accomodation Policy',GETDATE());
END;
GO

----Insert_Price_Category---------

IF OBJECT_ID (N'[dbo].spInsertPriceCategory','P')
IS NOT NULL
DROP PROCEDURE spInsertPriceCategory
GO

CREATE PROCEDURE spInsertPriceCategory
	@ManagerID INT,
	@Description VARCHAR(500)
AS
BEGIN
	SET NOCOUNT ON;
	
	 IF EXISTS (
        SELECT 1
        FROM dbo.PRICE_CATEGORY
        WHERE [DESCRIPTION] = @Description
    )
    BEGIN
        RAISERROR('This PRICE policy already exists.', 16, 1);
	END
	ELSE
		BEGIN
		INSERT INTO dbo.PRICE_CATEGORY([DESCRIPTION]) VALUES(@Description);
		
		--INSERT AUDIT MANAGER--
		INSERT INTO dbo.[AUDIT_MANAGER]([MANAGER_ID],[DESCRIPTION],[DATE])
		VALUES(@ManagerID,'Added Price Category',GETDATE());
	END
END;
GO


---GET PRICE CATEGORY-----

IF OBJECT_ID (N'[dbo].spGetPriceCategory','P')
IS NOT NULL
DROP PROCEDURE spGetPriceCategory
GO

CREATE PROCEDURE spGetPriceCategory
	
AS
BEGIN
	SET NOCOUNT ON;

	SELECT * FROM dbo.PRICE_CATEGORY 
	
END;
GO


--- ADD REVIEW----

IF OBJECT_ID (N'[dbo].spAddReview','P')
IS NOT NULL
DROP PROCEDURE spAddReview
GO

CREATE PROCEDURE spAddReview
	@UserID int,
	@Rating int,
	@Comment nvarchar(500),
	@Booking_ID int
	
AS
BEGIN
	SET NOCOUNT ON;
IF EXISTS (SELECT 1 FROM dbo.[BOOKING] B  WHERE B.BOOKING_ID = @Booking_ID AND B.RATING IS NOT NULL) OR EXISTS(SELECT 1 FROM dbo.[BOOKING] B WHERE B.[BOOKING_ID]=@Booking_ID AND B.[USER_ID] != @UserID) 
    BEGIN
        RAISERROR('Error: You have already reviewed this booking.', 16, 1);
    END
    ELSE
    BEGIN
		IF EXISTS (SELECT 1 FROM dbo.BOOKING B WHERE B.BOOKING_ID = @Booking_ID AND B.END_DATE > GETDATE())
		BEGIN
	
			RAISERROR('Too early to add a Review.', 16, 1);
		END
		ELSE
		BEGIN
			 UPDATE BOOKING
			SET BOOKING.RATING = @Rating, BOOKING.COMMENT=@Comment
			WHERE BOOKING.BOOKING_ID = @Booking_ID
		END
    END
END;
GO



--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
-----------------------------------GIANNIS--------------------------------|
--------------------------------------------------------------------------|
--------------------------------------------------------------------------|
--------------------------------------------------------------------------|


--GET ACCOMMODATIONS FOR MANAGER PRODUCT-------------------------------------------!!!
IF OBJECT_ID (N'[dbo].spGetAccomodationsForProduct','P')
IS NOT NULL
DROP PROCEDURE spGetAccomodationsForProduct
GO
CREATE PROCEDURE spGetAccomodationsForProduct
    @UserID INT
AS
BEGIN
SET NOCOUNT ON;
    SELECT A.ACC_ID,A.NAME,A.ADDRESS
    FROM MANAGES M JOIN ACCOMMODATION A ON M.ACCOM_ID=A.ACC_ID
    WHERE M.USER_ID=@UserID
END;
GO


--GET ROOM TYPES-------------------------------------------!!!
IF OBJECT_ID (N'[dbo].spGetRoomTypes','P')
IS NOT NULL
DROP PROCEDURE spGetRoomTypes
GO
CREATE PROCEDURE spGetRoomTypes
    @AccID INT
AS
BEGIN
SET NOCOUNT ON;
    SELECT *
    FROM ROOM_TYPE
    WHERE ACC_ID=@AccID
END;
GO

--GET ROOM TITLES-------------------------------------------!!!
IF OBJECT_ID (N'[dbo].spGetRoomTitles','P')
IS NOT NULL
DROP PROCEDURE spGetRoomTitles
GO
CREATE PROCEDURE spGetRoomTitles
AS
BEGIN
SET NOCOUNT ON;
    SELECT DISTINCT(TITLE)
    FROM ROOM_TYPE
END;
GO

--GET TERMS-------------------------------------------!!!
IF OBJECT_ID (N'[dbo].spGetTerms','P')
IS NOT NULL
DROP PROCEDURE spGetTerms
GO
CREATE PROCEDURE spGetTerms
AS
BEGIN
SET NOCOUNT ON;
    SELECT *
    FROM TERMS
END;
GO


--------GET CITIES------------------------------------!!!
IF OBJECT_ID (N'[dbo].spGetCities','P')
IS NOT NULL
DROP PROCEDURE spGetCities
GO
CREATE PROCEDURE spGetCities
	@Country NVARCHAR(200)
AS
BEGIN
SET NOCOUNT ON;
	SELECT C.CITY_NAME FROM CITY C WHERE C.COUNTRY_NAME=@Country
END;
GO

--------GET COUNTRIES------------------------------------!!!
IF OBJECT_ID (N'[dbo].spGetCountries','P')
IS NOT NULL
DROP PROCEDURE spGetCountries
GO
CREATE PROCEDURE spGetCountries
AS
BEGIN
SET NOCOUNT ON;
	SELECT COUNTRY.COUNTRY_NAME FROM COUNTRY
END;
GO

-----------------------------get accom names-------------------------!!!
IF OBJECT_ID (N'[dbo].spGetAccomNames','P')
IS NOT NULL
DROP PROCEDURE spGetAccomNames
GO
CREATE PROCEDURE spGetAccomNames
AS
BEGIN
SET NOCOUNT ON;
	SELECT A.ACC_ID,A.NAME FROM ACCOMMODATION A
END;
GO

IF OBJECT_ID (N'[dbo].spGetFacilities','P')
IS NOT NULL
DROP PROCEDURE spGetFacilities
GO
CREATE PROCEDURE spGetFacilities
AS
BEGIN
SET NOCOUNT ON;
	SELECT * FROM FACILITIES
END;
GO

IF OBJECT_ID (N'[dbo].spGetPolicies','P')
IS NOT NULL
DROP PROCEDURE spGetPolicies
GO
CREATE PROCEDURE spGetPolicies
AS
BEGIN
SET NOCOUNT ON;
	SELECT * FROM ACCOMMODATION_POLICY
END;
GO

IF OBJECT_ID (N'[dbo].spGetCancellationPolicy','P')
IS NOT NULL
DROP PROCEDURE spGetCancellationPolicy
GO
CREATE PROCEDURE spGetCancellationPolicy
AS
BEGIN
SET NOCOUNT ON;
	SELECT * FROM CANCELLATION_POLICY
END;
GO


IF OBJECT_ID (N'[dbo].spGetPrepaymentPolicy','P')
IS NOT NULL
DROP PROCEDURE spGetPrepaymentPolicy
GO
CREATE PROCEDURE spGetPrepaymentPolicy
AS
BEGIN
SET NOCOUNT ON;
	SELECT * FROM PREPAYMENT_POLICY
END;
GO

IF OBJECT_ID (N'[dbo].spGetAuditManager','P')
IS NOT NULL
DROP PROCEDURE spGetAuditManager
GO

CREATE PROCEDURE spGetAuditManager

AS
BEGIN
    SET NOCOUNT ON;

    SELECT * FROM AUDIT_MANAGER

END;
GO

-----------------------------get all cities-------------------------!!!
IF OBJECT_ID (N'[dbo].spGetBookings','P')
IS NOT NULL
DROP PROCEDURE spGetBookings
GO
CREATE PROCEDURE spGetBookings
	@id INT
AS
BEGIN
SET NOCOUNT ON;
	SELECT *
	FROM BOOKING B
	WHERE B.USER_ID=@id
END;
GO

IF OBJECT_ID (N'[dbo].spGetCitiesAll','P')
IS NOT NULL
DROP PROCEDURE spGetCitiesAll
GO
CREATE PROCEDURE spGetCitiesAll
AS
BEGIN
SET NOCOUNT ON;
	SELECT *
	FROM CITY
END;
GO

IF OBJECT_ID (N'[dbo].spGetAmenities','P')
IS NOT NULL
DROP PROCEDURE spGetAmenities
GO
CREATE PROCEDURE spGetAmenities
AS
BEGIN
SET NOCOUNT ON;
	SELECT *
	FROM AMENITY
END;
GO

IF OBJECT_ID (N'[dbo].spVerifyManager','P')
IS NOT NULL
DROP PROCEDURE spVerifyManager
GO
CREATE PROCEDURE spVerifyManager
	@ManagerID INT
AS
BEGIN
SET NOCOUNT ON;
	UPDATE [USER]
	SET [USER].VERIFIED = 1 WHERE [USER].USER_ID=@ManagerID
END;
GO
